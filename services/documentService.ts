import { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType, BorderStyle } from 'docx';
import saveAs from 'file-saver';
import { jsPDF } from 'jspdf';
import JSZip from 'jszip';

interface Sections {
  communication: string;
  followUp: string;
  conflictHandling: string;
  reporting: string;
  customerHandling: string;
}

// DOCX Generation
const createDocx = (userName: string, sections: Sections): Promise<Blob> => {
  const doc = new Document({
    creator: "Ops & Sales Task Assistant",
    title: `Ops & Sales Task – ${userName}`,
    description: "Task submission generated by the Ops & Sales Task Assistant",
    styles: {
        paragraphStyles: [
            {
                id: "Heading1",
                name: "Heading 1",
                basedOn: "Normal",
                next: "Normal",
                quickFormat: true,
                run: {
                    size: 32,
                    bold: true,
                    color: "2E74B5",
                },
                paragraph: {
                    spacing: { after: 240 },
                },
            },
            {
                id: "Heading2",
                name: "Heading 2",
                basedOn: "Normal",
                next: "Normal",
                quickFormat: true,
                run: {
                    size: 26,
                    bold: true,
                    color: "44546A"
                },
                paragraph: {
                    spacing: { before: 240, after: 120 },
                },
            },
        ],
    },
  });

  const textToParagraphs = (text: string) => text.split('\n').map(line => new Paragraph({ children: [new TextRun(line)]}));

  const scheduleData = [
      ["Riya Sharma", "Tuesday", "5 PM", "Expert A", "6 PM"],
      ["Aman Gupta", "Wednesday", "11 AM", "Expert B", "11:30 AM"],
      ["Sneha Iyer", "Thursday", "3 PM", "Expert A", "3 PM"],
  ];
  const scheduleHeader = ["Customer Name", "Preferred Day", "Preferred Time", "Expert", "Scheduled Time"];

  const scheduleTable = new Table({
      rows: [
          new TableRow({
              children: scheduleHeader.map(header => new TableCell({
                  children: [new Paragraph({ children: [new TextRun({ text: header, bold: true })]})],
                  shading: { fill: "F2F2F2" },
              })),
          }),
          ...scheduleData.map(row => new TableRow({
              children: row.map(cell => new TableCell({ children: [new Paragraph(cell)] })),
          })),
      ],
      width: { size: 100, type: WidthType.PERCENTAGE },
  });

  doc.addSection({
    children: [
      new Paragraph({ text: `Ops & Sales Task – ${userName}`, heading: "Heading1" }),
      
      new Paragraph({ text: "Section 1: Communication Scenario", heading: "Heading2" }),
      ...textToParagraphs(sections.communication),

      new Paragraph({ text: "Section 2: Sales Follow-up", heading: "Heading2" }),
      ...textToParagraphs(sections.followUp),

      new Paragraph({ text: "Section 3: Scheduling & Ops Coordination", heading: "Heading2" }),
      scheduleTable,
      new Paragraph({ children: [new TextRun({ text: "\nConflict Handling Explanation:", bold: true })]}),
      new Paragraph(sections.conflictHandling),

      new Paragraph({ text: "Section 4: Reporting & Metrics", heading: "Heading2" }),
      ...textToParagraphs(sections.reporting),

      new Paragraph({ text: "Section 5: Customer Handling Scenario", heading: "Heading2" }),
      ...textToParagraphs(sections.customerHandling),
    ],
  });

  return Packer.toBlob(doc);
};

// PDF Generation
const createPdf = (userName: string, sections: Sections): Blob => {
    const doc = new jsPDF();
    const margin = 15;
    const pageWidth = doc.internal.pageSize.getWidth();
    let yPos = 20;

    const addText = (text: string, options: any = {}) => {
        const lines = doc.splitTextToSize(text, pageWidth - margin * 2);
        doc.text(lines, margin, yPos, options);
        yPos += lines.length * 5 + (options.spacing || 5);
        if (yPos > 280) { // Add new page if content overflows
            doc.addPage();
            yPos = 20;
        }
    };
    
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.setTextColor("#2E74B5");
    addText(`Ops & Sales Task – ${userName}`, { spacing: 10 });

    const addSection = (title: string, content: string) => {
        doc.setFont("helvetica", "bold");
        doc.setFontSize(14);
        doc.setTextColor("#44546A");
        addText(title, { spacing: 8 });

        doc.setFont("helvetica", "normal");
        doc.setFontSize(11);
        doc.setTextColor("#333333");
        addText(content);
    };

    addSection("Section 1: Communication Scenario", sections.communication);
    addSection("Section 2: Sales Follow-up", sections.followUp);
    addSection("Section 3: Scheduling & Ops Coordination", "Scheduling table is available in the DOCX file.\n\nConflict Handling Explanation:\n" + sections.conflictHandling);
    addSection("Section 4: Reporting & Metrics", sections.reporting);
    addSection("Section 5: Customer Handling Scenario", sections.customerHandling);

    return doc.output('blob');
}

// ZIP Generation
export const generateZip = async (userName: string, sections: Sections) => {
  const safeUserName = userName.replace(/\s+/g, '_');
  const zip = new JSZip();

  const docxBlob = await createDocx(userName, sections);
  zip.file(`Ops_Sales_Task_${safeUserName}.docx`, docxBlob);

  const pdfBlob = createPdf(userName, sections);
  zip.file(`Ops_Sales_Task_${safeUserName}.pdf`, pdfBlob);

  const zipBlob = await zip.generateAsync({ type: 'blob' });
  saveAs(zipBlob, `Ops_Sales_Task_${safeUserName}.zip`);
};